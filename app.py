import gradio as gr
import os
import tempfile
from core.animator import animate_portrait
from core.morph3d import create_3d_animation
from core.utils import validate_image, validate_video, create_thumbnail

# CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
css = """
footer {visibility: hidden}
.gradio-container {max-width: 1200px !important}
.output-video {
    border-radius: 15px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
.upload-box {
    border: 2px dashed #ccc;
    border-radius: 10px;
    padding: 20px;
    text-align: center;
}
"""

def process_animation(input_image, driving_video, mode, progress=gr.Progress()):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not validate_image(input_image):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        if mode == "GAN" and not validate_video(driving_video):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è GAN —Ä–µ–∂–∏–º–∞")
        
        progress(0.2, desc="–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if mode == "GAN":
            progress(0.4, desc="–°–æ–∑–¥–∞–Ω–∏–µ GAN –∞–Ω–∏–º–∞—Ü–∏–∏...")
            output_path = animate_portrait(input_image, driving_video)
        else:
            progress(0.4, desc="–°–æ–∑–¥–∞–Ω–∏–µ 3D –º–æ—Ä—Ñ–∏–Ω–≥–∞...")
            output_path = create_3d_animation(input_image)
        
        progress(0.8, desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é
        thumbnail_path = tempfile.mktemp(suffix='.jpg')
        create_thumbnail(output_path, thumbnail_path)
        
        progress(1.0, desc="–ì–æ—Ç–æ–≤–æ!")
        return output_path, thumbnail_path
        
    except Exception as e:
        raise gr.Error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
with gr.Blocks(css=css, title="PortraitLive - –û–∂–∏–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤") as app:
    gr.Markdown("""
    # üé≠ PortraitLive
    ## –û–∂–∏–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI (GAN + 3D Morphing)
    """)
    
    with gr.Row():
        with gr.Column(scale=1):
            gr.Markdown("### üìÅ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            input_image = gr.Image(
                label="–ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç",
                type="filepath",
                elem_classes="upload-box"
            )
            
            driving_video = gr.Video(
                label="–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è GAN)",
                elem_classes="upload-box"
            )
            
            mode = gr.Radio(
                choices=["GAN", "3D Morph"],
                label="–†–µ–∂–∏–º –∞–Ω–∏–º–∞—Ü–∏–∏",
                value="GAN",
                interactive=True
            )
            
            process_btn = gr.Button(
                "üöÄ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é",
                variant="primary",
                size="lg"
            )
        
        with gr.Column(scale=2):
            gr.Markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç")
            
            with gr.Row():
                output_thumbnail = gr.Image(
                    label="–ü—Ä–µ–≤—å—é",
                    interactive=False,
                    height=200
                )
                output_video = gr.Video(
                    label="–ê–Ω–∏–º–∞—Ü–∏—è",
                    elem_classes="output-video",
                    interactive=False
                )
            
            gr.Markdown("### üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            info_text = gr.Textbox(
                label="–°—Ç–∞—Ç—É—Å",
                value="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º",
                interactive=False
            )
    
    # –ü—Ä–∏–º–µ—Ä—ã
    examples = gr.Examples(
        examples=[
            [os.path.join("examples", "mona_lisa.jpg"), None, "3D Morph"],
            [os.path.join("examples", "portrait.jpg"), os.path.join("examples", "driving_video.mp4"), "GAN"]
        ],
        inputs=[input_image, driving_video, mode],
        outputs=[output_video, output_thumbnail],
        fn=process_animation,
        cache_examples=True
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    process_btn.click(
        fn=process_animation,
        inputs=[input_image, driving_video, mode],
        outputs=[output_video, output_thumbnail]
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    input_image.change(
        fn=lambda x: f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {os.path.basename(x) if x else '–ù–µ—Ç'}", 
        inputs=input_image, 
        outputs=info_text
    )

if __name__ == "__main__":
    app.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        debug=True
    )
